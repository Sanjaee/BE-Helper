version: "3.8"

services:
  # === PostgreSQL Database ===
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: postgres # database default
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5

  # === pgAdmin UI ===
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./db/init/pgadmin_servers.json:/pgadmin4/servers.json
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend

  # === Redis Cache ===
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # === RabbitMQ Message Broker ===
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: secret123
    ports:
      - "5672:5672"
      - "15672:15672" # UI Management
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 3s
      retries: 5

  # === User Service (Go) ===
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=123
      - DB_NAME=userdb
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - JWT_ACCESS_EXPIRY=15m
      - JWT_REFRESH_EXPIRY=168h
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=admin
      - RABBITMQ_PASSWORD=secret123
      - PORT=5001
      - GIN_MODE=debug
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USERNAME=gamingafriza005@gmail.com
      - SMTP_PASSWORD=prcypthkwnplsuzv
      - SMTP_FROM=gamingafriza005@gmail.com
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: sh -c "sleep 10 && ./main"
    restart: unless-stopped
    networks:
      - backend

  # === Order Service ===
  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    container_name: order-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=123
      - DB_NAME=orderdb
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=admin
      - RABBITMQ_PASSWORD=secret123
      - PORT=5002
      - GIN_MODE=debug
    ports:
      - "5002:5002"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      uuid-setup:
        condition: service_completed_successfully
    command: sh -c "sleep 5 && ./main"
    restart: unless-stopped
    networks:
      - backend

  # === UUID Extension Setup ===
  uuid-setup:
    image: postgres:15-alpine
    container_name: uuid-setup
    environment:
      - PGPASSWORD=123
    command: >
      sh -c "
        echo 'Setting up UUID extensions...' &&
        psql -h postgres -U postgres -d postgres -c 'CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";' &&
        psql -h postgres -U postgres -d userdb -c 'CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";' &&
        psql -h postgres -U postgres -d orderdb -c 'CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";' &&
        psql -h postgres -U postgres -d locationdb -c 'CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";' &&
        psql -h postgres -U postgres -d paymentdb -c 'CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";' &&
        psql -h postgres -U postgres -d notificationdb -c 'CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";' &&
        echo 'UUID extensions setup completed!'
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    restart: "no"

  # === Location Service ===
  location-service:
    build:
      context: ./services/location-service
      dockerfile: Dockerfile
    container_name: location-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=123
      - DB_NAME=locationdb
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=admin
      - RABBITMQ_PASSWORD=secret123
      - PORT=5003
      - GIN_MODE=debug
    ports:
      - "5003:5003"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      uuid-setup:
        condition: service_completed_successfully
    command: sh -c "sleep 5 && ./main"
    restart: unless-stopped
    networks:
      - backend

  # === Notification Service ===
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=123
      - DB_NAME=notificationdb
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=1
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=admin
      - RABBITMQ_PASSWORD=secret123
      - PORT=5004
      - GIN_MODE=debug
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USERNAME=gamingafriza005@gmail.com
      - SMTP_PASSWORD=prcypthkwnplsuzv
      - FROM_EMAIL=gamingafriza005@gmail.com
      - FROM_NAME=ZACloth
      - LOG_LEVEL=info
      - LOG_FORMAT=json
    ports:
      - "5004:5004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: sh -c "sleep 15 && ./main"
    restart: unless-stopped
    networks:
      - backend

  # === API Gateway ===
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    environment:
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - JWT_ACCESS_EXPIRY=15m
      - JWT_REFRESH_EXPIRY=168h
      - USER_SERVICE_URL=http://user-service:5001
      - ORDER_SERVICE_URL=http://order-service:5002
      - LOCATION_SERVICE_URL=http://location-service:5003
      - NOTIFICATION_SERVICE_URL=http://notification-service:5004
      - PORT=5000
      - GIN_MODE=debug
    ports:
      - "5000:5000"
    depends_on:
      user-service:
        condition: service_started
      order-service:
        condition: service_started
      location-service:
        condition: service_started
      notification-service:
        condition: service_started
    command: sh -c "sleep 10 && ./main"
    restart: unless-stopped
    networks:
      - backend

# === Docker Network ===
networks:
  backend:
    driver: bridge

# === Docker Volume ===
volumes:
  postgres_data:
  pgadmin_data:
